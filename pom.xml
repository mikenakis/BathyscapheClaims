<!--
  ~ Copyright (c) 2022 Michael Belivanakis a.k.a. MikeNakis, michael.gr
  ~
  ~ For licensing information, please see LICENSE.md.
  ~ You may not use this file except in compliance with the license.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>io.github.mikenakis</groupId>
	<artifactId>bathyscaphe-claims</artifactId>
	<version>1.18-SNAPSHOT</version>

	<name>BathyscapheClaims</name>
	<description>Annotations and interfaces to use in your code for interoperability with io.github.mikenakis:Bathyscaphe</description>
	<url>https://github.com/mikenakis/BathyscapheClaims</url>

	<licenses>
		<license>
			<name>MIT License</name>
			<url>http://www.opensource.org/licenses/mit-license.php</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<inceptionYear>2022</inceptionYear>

	<developers>
		<developer>
			<id>michael.gr</id>
			<name>Mike Nakis</name>
			<email>pom.xml@michael.gr</email>
			<organization>michael.gr</organization>
			<organizationUrl>http://michael.gr</organizationUrl>
			<roles>
				<role>architect</role>
				<role>developer</role>
			</roles>
		</developer>
	</developers>

	<scm>
		<url>https://github.com/mikenakis/BathyscapheClaims.git</url>
		<connection>scm:git:${project.scm.url}</connection>
		<developerConnection>scm:git:${project.scm.url}</developerConnection>
		<tag>HEAD</tag>
	</scm>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>8</maven.compiler.source>
		<maven.compiler.target>8</maven.compiler.target>
	</properties>

	<build>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>3.2.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>3.4.0</version>
					<configuration>
						<doclint>none</doclint>
						<source>${maven.compiler.source}</source>

					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>3.0.0-M2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>3.0.0-M5</version>
					<configuration>
						<!-- magical incantations from https://github.com/gh-a-sample/github-actions-maven-release-sample -->
						<scmCommentPrefix>[ci skip]</scmCommentPrefix>
						<tagNameFormat>@{project.version}</tagNameFormat>
						<!-- do not run any tests when releasing. Normal build should have taken care of that. -->
						<arguments>-Dmaven.test.skip</arguments>
<!--						<checkModificationExcludes>-->
<!--							<checkModificationExclude>**</checkModificationExclude>-->
<!--						</checkModificationExcludes>-->
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.sonatype.plugins</groupId>
					<artifactId>nexus-staging-maven-plugin</artifactId>
					<version>1.6.13</version>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.source}</target>
					<compilerArgs>




						<!-- The "-parameters" option "Generates metadata for reflection on method parameters." That's good, we want this. -->
						<arg>-parameters</arg>

						<!-- If there are any warnings, we want compilation to fail. I pity all those who a) don't have as many as possible warnings enabled, and b) don't have
						     their build configured to treat warnings as errors. -->
						<arg>-Werror</arg>

						<!-- The "-Xlint" option enables all recommended warnings. We will then suppress some that we have no use for. -->
						<arg>-Xlint</arg>





						<!-- The "try" sub-option of the "Xlint" option is mind-bogglingly stupid.
							It lives in a simplistic world in which resources are always created, used, and disposed within a single function, so it aims to warn you that you
							forgot to dispose of a resource within the function that created it.
							The following possibilities never occurred to the mastermind who invented this option:
							- You might invoke a function which creates a resource and returns it, to be used and of course disposed by the caller.
							- You might create a resource and store it as a member variable of an object, which will of course dispose the resource when it gets disposed.
							So, the only reasonable thing to do with this warning is to always keep it disabled. -->
						<arg>-Xlint:-try</arg>

						<!-- The "serial" sub-option of the "Xlint" option "Warns about missing serialVersionUID definitions on serializable classes".
						    In other words, every single time you extend some predefined class, you will be hit with an annoying warning just because the class you are extending
						    happens to be serializable, a feature which you usually have no use for, don't care about, and don't want to be bothered with. -->
						<arg>-Xlint:-serial</arg>

						<!-- PEARL: When the packaging is 'jar', IntellijIdea creates a "target/generated-sources/annotations" directory in our source tree each time we build.
							 IntellijIdea insists on doing this, despite the fact that:
							 - We have specified that we do not want any annotation processing to take place. (In this case, the directory still gets created, and is empty.)
							 - We have specified that our output folder is something other than 'target'. (IntellijIdea will nonetheless create a directory called 'target'.)
							 This is related to some other very strange behavior of IntellijIdea: if you go to Settings... / Build, Execution, Deployment / Compiler / Annotation
							 Processors you will find that the 'Enable annotation processing' checkbox is unchecked. However, as it turns out, this only applies to the mysterious,
							 nonsensical 'Default' branch of the mysterious, nonsensical tree that appears to the left of the checkbox. If you scroll down that tree, you will
							 discover that there are more branches, and for those branches 'Enable annotation processing' is checked, and the "target/generated-sources/annotations"
							 directory is specified. I have no idea how or why IntellijIdea creates those branches, and why it configures them like that. The only way I have found
							 to prevent all that nonsense from affecting the directories created is by explicitly disabling annotation processing here, with -proc:none.
							 PEARL on PEARL: the use of this option causes the following message to appear in the build window of IntellijIdea:
							   java: User-specified option "-proc:none" is ignored for "<project>". This compilation parameter is set automatically according to project settings.
							 Still, I would rather have this silly warning appear during build, than have weird empty extra target folders created.
							 - Note that the 'java:' prefix suggests that this message is issued by the java compiler, while in fact it is issued by IntellijIdea.
							 - Note that -Xlint:-processing does not help at all in suppressing this warning.
							 - Note that contrary to what the warning message says, the -proc:none option is not ignored, because the annoying directories are not created.	-->
						<arg>-proc:none</arg>
					</compilerArgs>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<distributionManagement>
		<repository>
			<id>github-bathyscaphe-claims</id>
			<!-- PEARL: In the 'mikenakis/BathyscapheClaims' part, there be magic: in GitHub, the name of the artifact repository must match the name of the source code repository. -->
			<url>https://maven.pkg.github.com/mikenakis/BathyscapheClaims</url>
		</repository>
		<!--		<snapshotRepository>-->
		<!--			<id>github-bathyscaphe-claims</id>-->
		<!--			&lt;!&ndash; PEARL: In the 'mikenakis/BathyscapheClaims' part, there be magic: in GitHub, the name of the artifact repository must match the name of the source code repository. &ndash;&gt;-->
		<!--			<url>https://maven.pkg.github.com/mikenakis/BathyscapheClaims</url>-->
		<!--		</snapshotRepository>-->
		<snapshotRepository>
			<id>repsy-mikenakis-public</id>
			<url>https://repo.repsy.io/mvn/mikenakis/mikenakis-public</url>
		</snapshotRepository>
	</distributionManagement>

	<dependencies>
		<!-- yay! no dependencies! -->
	</dependencies>
</project>
